name: Yarn check & Deploy to Heroku

on: 
  push:
    branches:    
      - dev

  pull_request:
    branches:
      - master

jobs:

  frontend-test:

    runs-on: ubuntu-latest
    env:
      frontend-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [12.x]
    
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    
    - uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    
    - name: yarn install
      run: yarn install --frozen-lockfile
      working-directory: ${{ env.frontend-directory }}
        
    - name: yarn test
      run: yarn test 
      working-directory: ${{ env.frontend-directory }}
      env:
        CI: true

    - name: Run codacy-coverage-reporter
      uses: mrfyda/codacy-coverage-reporter-action@master
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

    - name: send discord success message
      if: success()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_SUCCESS }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_SUCCESS }}
        avatar_url: "https://i.imgur.com/YBD6GVz.png"
        color: "#2ECC71"
        username: "Novel Check Bot"
        message: "`Frontend-Test` has passed."


    - name: send discord failure message
      if: failure()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_FAIL }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_FAIL }}
        avatar_url: "https://i.imgur.com/66VzOSm.png"
        color: "#E74C3C"
        username: "Novel Check Bot"
        message: "`Frontend-Test` has failed."

  fronetend-lint:
        
    runs-on: ubuntu-latest
    env:
      frontend-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [12.x]
    
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    
    - uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
        
    - name: yarn install
      run: yarn install --frozen-lockfile
      working-directory: ${{ env.frontend-directory }}
    
    - name: yarn lint
      run: yarn lint
      working-directory: ${{ env.frontend-directory }}

    - name: send discord success message
      if: success()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_SUCCESS }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_SUCCESS }}
        avatar_url: "https://i.imgur.com/YBD6GVz.png"
        color: "#2ECC71"
        username: "Novel Check Bot"
        message: "`Frontend-Lint` has passed."


    - name: send discord failure message
      if: failure()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_FAIL }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_FAIL }}
        avatar_url: "https://i.imgur.com/66VzOSm.png"
        color: "#E74C3C"
        username: "Novel Check Bot"
        message: "`Frontend-Lint` has failed."

  backend-test:

    runs-on: ubuntu-latest
    env:
      frontend-directory: ./frontend
      backend-directory: ./backend
    
    steps:
    - uses: actions/checkout@v1

    - name: install libpq-dev
      run: sudo apt update && sudo apt install libpq-dev

    - name: add firebase secrets
      run: gpg --quiet --batch --yes --decrypt --passphrase=${{secrets.FIREBASE_DECRYPT_KEY}} --output backend/firebase.json backend/firebase.json.gpg

    - name: setup python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: pip install
      run: pip3 install -r backend/requirements.txt

    - name: python test
      run: python3 manage.py test
      working-directory: ${{ env.backend-directory }}

    - name: send discord success message
      if: success()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_SUCCESS }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_SUCCESS }}
        avatar_url: "https://i.imgur.com/YBD6GVz.png"
        color: "#2ECC71"
        username: "Novel Check Bot"
        message: "`Backend-Test` has passed."


    - name: send discord failure message
      if: failure()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_FAIL }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_FAIL }}
        avatar_url: "https://i.imgur.com/66VzOSm.png"
        color: "#E74C3C"
        username: "Novel Check Bot"
        message: "`Backend-Test` has failed."
    

  dev-deploy:

    needs: [frontend-test, backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    env:
      frontend-directory: ./frontend
      backend-directory: ./backend
      heroku-directory: ./heroku
    
    strategy:
      matrix:
        node-version: [12.x]
    
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    
    - uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    
    - name: yarn install
      run: yarn install --frozen-lockfile
      working-directory: ${{ env.frontend-directory }}
      
    - name: yarn build
      run: yarn run build --if-present
      working-directory: ${{ env.frontend-directory }}

    - name: copy build files
      run: mkdir backend/frontend && cp frontend/build/* backend/frontend/ -r

    - name: add firebase secrets
      run: gpg --quiet --batch --yes --decrypt --passphrase=${{secrets.FIREBASE_DECRYPT_KEY}} --output backend/firebase.json backend/firebase.json.gpg

    - name: clone heroku
      run: git clone https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git ${{env.heroku-directory}}

    - name: copy to heroku
      run: cp backend/* heroku/ -r
    - name: git config
      run: git config --global user.name jelszo &&  git config --global user.email support@jelszo.co


    - name: git add
      run: git add .
      working-directory: ${{env.heroku-directory}}

    - name: git commit
      run: git commit -m "deploy"
      working-directory: ${{env.heroku-directory}}

    - name: Deploy to heroku
      run: git push
      working-directory: ${{env.heroku-directory}}


    - name: send discord success message
      if: success()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_SUCCESS }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_SUCCESS }}
        avatar_url: "https://i.imgur.com/YBD6GVz.png"
        color: "#2ECC71"
        username: "Novel Check Bot"
        message: "`Deploy` has done."


    - name: send discord failure message
      if: failure()
      uses: appleboy/discord-action@master
      with:
        webhook_id: ${{ secrets.WEBHOOK_ID_FAIL }}
        webhook_token: ${{ secrets.WEBHOOK_TOKEN_FAIL }}
        avatar_url: "https://i.imgur.com/66VzOSm.png"
        color: "#E74C3C"
        username: "Novel Check Bot"
        message: "`Deploy` has failed."